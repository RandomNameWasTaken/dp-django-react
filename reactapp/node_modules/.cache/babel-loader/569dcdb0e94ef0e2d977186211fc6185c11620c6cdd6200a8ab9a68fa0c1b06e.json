{"ast":null,"code":"import _createClass from \"/home/xkruzel/Desktop/todo/reactapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/xkruzel/Desktop/todo/reactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _possibleConstructorReturn from \"/home/xkruzel/Desktop/todo/reactapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/home/xkruzel/Desktop/todo/reactapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/xkruzel/Desktop/todo/reactapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport { ExtrudeGeometry } from 'three';\nvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n  _inherits(TextGeometry, _ExtrudeGeometry);\n  var _super = _createSuper(TextGeometry);\n  function TextGeometry(text) {\n    var _this;\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TextGeometry);\n    var font = parameters.font;\n    if (font === undefined) {\n      _this = _super.call(this); // generate default extrude geometry\n    } else {\n      var shapes = font.generateShapes(text, parameters.size);\n\n      // translate parameters to ExtrudeGeometry API\n\n      parameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n      // defaults\n\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n      _this = _super.call(this, shapes, parameters);\n    }\n    _this.type = 'TextGeometry';\n    return _possibleConstructorReturn(_this);\n  }\n  return _createClass(TextGeometry);\n}(ExtrudeGeometry);\nexport { TextGeometry };","map":{"version":3,"names":["ExtrudeGeometry","TextGeometry","text","parameters","font","undefined","shapes","generateShapes","size","depth","height","bevelThickness","bevelSize","bevelEnabled","type"],"sources":["/home/xkruzel/node_modules/three/examples/jsm/geometries/TextGeometry.js"],"sourcesContent":["/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACCA,eAAe,QACT,OAAO;AAAC,IAETC,YAAY;EAAA;EAAA;EAEjB,sBAAaC,IAAI,EAAoB;IAAA;IAAA,IAAlBC,UAAU,uEAAG,CAAC,CAAC;IAAA;IAEjC,IAAMC,IAAI,GAAGD,UAAU,CAACC,IAAI;IAE5B,IAAKA,IAAI,KAAKC,SAAS,EAAG;MAEzB,0BAAQ,CAAC;IAEV,CAAC,MAAM;MAEN,IAAMC,MAAM,GAAGF,IAAI,CAACG,cAAc,CAAEL,IAAI,EAAEC,UAAU,CAACK,IAAI,CAAE;;MAE3D;;MAEAL,UAAU,CAACM,KAAK,GAAGN,UAAU,CAACO,MAAM,KAAKL,SAAS,GAAGF,UAAU,CAACO,MAAM,GAAG,EAAE;;MAE3E;;MAEA,IAAKP,UAAU,CAACQ,cAAc,KAAKN,SAAS,EAAGF,UAAU,CAACQ,cAAc,GAAG,EAAE;MAC7E,IAAKR,UAAU,CAACS,SAAS,KAAKP,SAAS,EAAGF,UAAU,CAACS,SAAS,GAAG,CAAC;MAClE,IAAKT,UAAU,CAACU,YAAY,KAAKR,SAAS,EAAGF,UAAU,CAACU,YAAY,GAAG,KAAK;MAE5E,0BAAOP,MAAM,EAAEH,UAAU;IAE1B;IAEA,MAAKW,IAAI,GAAG,cAAc;IAAC;EAE5B;EAAC;AAAA,EA9ByBd,eAAe;AAmC1C,SAASC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}