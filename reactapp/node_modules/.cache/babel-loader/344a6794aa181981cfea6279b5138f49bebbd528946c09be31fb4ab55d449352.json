{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isConstantExpression = isConstantExpression;\nObject.defineProperty(exports, \"isConstantNode\", {\n  enumerable: true,\n  get: function get() {\n    return _is.isConstantNode;\n  }\n});\nexports.isNumericNode = isNumericNode;\nObject.defineProperty(exports, \"isVariableNode\", {\n  enumerable: true,\n  get: function get() {\n    return _is.isSymbolNode;\n  }\n});\nvar _is = require(\"../../../utils/is.js\");\nfunction isNumericNode(x) {\n  return (0, _is.isConstantNode)(x) || (0, _is.isOperatorNode)(x) && x.isUnary() && (0, _is.isConstantNode)(x.args[0]);\n}\nfunction isConstantExpression(x) {\n  if ((0, _is.isConstantNode)(x)) {\n    // Basic Constant types\n    return true;\n  }\n  if (((0, _is.isFunctionNode)(x) || (0, _is.isOperatorNode)(x)) && x.args.every(isConstantExpression)) {\n    // Can be constant depending on arguments\n    return true;\n  }\n  if ((0, _is.isParenthesisNode)(x) && isConstantExpression(x.content)) {\n    // Parenthesis are transparent\n    return true;\n  }\n  return false; // Probably missing some edge cases\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","isConstantExpression","enumerable","get","_is","isConstantNode","isNumericNode","isSymbolNode","require","x","isOperatorNode","isUnary","args","isFunctionNode","every","isParenthesisNode","content"],"sources":["/home/xkruzel/Desktop/todo/reactapp/node_modules/mathjs/lib/cjs/function/algebra/simplify/wildcards.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isConstantExpression = isConstantExpression;\nObject.defineProperty(exports, \"isConstantNode\", {\n  enumerable: true,\n  get: function get() {\n    return _is.isConstantNode;\n  }\n});\nexports.isNumericNode = isNumericNode;\nObject.defineProperty(exports, \"isVariableNode\", {\n  enumerable: true,\n  get: function get() {\n    return _is.isSymbolNode;\n  }\n});\nvar _is = require(\"../../../utils/is.js\");\nfunction isNumericNode(x) {\n  return (0, _is.isConstantNode)(x) || (0, _is.isOperatorNode)(x) && x.isUnary() && (0, _is.isConstantNode)(x.args[0]);\n}\nfunction isConstantExpression(x) {\n  if ((0, _is.isConstantNode)(x)) {\n    // Basic Constant types\n    return true;\n  }\n  if (((0, _is.isFunctionNode)(x) || (0, _is.isOperatorNode)(x)) && x.args.every(isConstantExpression)) {\n    // Can be constant depending on arguments\n    return true;\n  }\n  if ((0, _is.isParenthesisNode)(x) && isConstantExpression(x.content)) {\n    // Parenthesis are transparent\n    return true;\n  }\n  return false; // Probably missing some edge cases\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB;AACnDJ,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,gBAAgB,EAAE;EAC/CG,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAASA,GAAG,GAAG;IAClB,OAAOC,GAAG,CAACC,cAAc;EAC3B;AACF,CAAC,CAAC;AACFN,OAAO,CAACO,aAAa,GAAGA,aAAa;AACrCT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,gBAAgB,EAAE;EAC/CG,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAASA,GAAG,GAAG;IAClB,OAAOC,GAAG,CAACG,YAAY;EACzB;AACF,CAAC,CAAC;AACF,IAAIH,GAAG,GAAGI,OAAO,CAAC,sBAAsB,CAAC;AACzC,SAASF,aAAa,CAACG,CAAC,EAAE;EACxB,OAAO,CAAC,CAAC,EAAEL,GAAG,CAACC,cAAc,EAAEI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEL,GAAG,CAACM,cAAc,EAAED,CAAC,CAAC,IAAIA,CAAC,CAACE,OAAO,EAAE,IAAI,CAAC,CAAC,EAAEP,GAAG,CAACC,cAAc,EAAEI,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;AACtH;AACA,SAASX,oBAAoB,CAACQ,CAAC,EAAE;EAC/B,IAAI,CAAC,CAAC,EAAEL,GAAG,CAACC,cAAc,EAAEI,CAAC,CAAC,EAAE;IAC9B;IACA,OAAO,IAAI;EACb;EACA,IAAI,CAAC,CAAC,CAAC,EAAEL,GAAG,CAACS,cAAc,EAAEJ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEL,GAAG,CAACM,cAAc,EAAED,CAAC,CAAC,KAAKA,CAAC,CAACG,IAAI,CAACE,KAAK,CAACb,oBAAoB,CAAC,EAAE;IACpG;IACA,OAAO,IAAI;EACb;EACA,IAAI,CAAC,CAAC,EAAEG,GAAG,CAACW,iBAAiB,EAAEN,CAAC,CAAC,IAAIR,oBAAoB,CAACQ,CAAC,CAACO,OAAO,CAAC,EAAE;IACpE;IACA,OAAO,IAAI;EACb;EACA,OAAO,KAAK,CAAC,CAAC;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}