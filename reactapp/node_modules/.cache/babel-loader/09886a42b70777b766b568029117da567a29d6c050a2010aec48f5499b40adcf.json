{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLyap = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nvar createLyap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    sylvester = _ref.sylvester,\n    multiply = _ref.multiply,\n    transpose = _ref.transpose;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});\nexports.createLyap = createLyap;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLyap","_factory","require","name","dependencies","factory","_ref","typed","matrix","sylvester","multiply","transpose","MatrixMatrix","A","Q","ArrayMatrix","MatrixArray","ArrayArray","toArray"],"sources":["/home/xkruzel/Desktop/todo/reactapp/node_modules/mathjs/lib/cjs/function/algebra/lyap.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLyap = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nvar createLyap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    sylvester = _ref.sylvester,\n    multiply = _ref.multiply,\n    transpose = _ref.transpose;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});\nexports.createLyap = createLyap;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;AAC5E,IAAIJ,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,SAAS,GAAGH,IAAI,CAACG,SAAS;IAC1BC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;IACxBC,SAAS,GAAGL,IAAI,CAACK,SAAS;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASS,YAAY,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOL,SAAS,CAACI,CAAC,EAAEF,SAAS,CAACE,CAAC,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC;IACpD,CAAC;IACD,eAAe,EAAE,SAASC,WAAW,CAACF,CAAC,EAAEC,CAAC,EAAE;MAC1C,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAC,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,eAAe,EAAE,SAASE,WAAW,CAACH,CAAC,EAAEC,CAAC,EAAE;MAC1C,OAAOL,SAAS,CAACI,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,cAAc,EAAE,SAASG,UAAU,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACxC,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAC,CAAC,EAAEF,SAAS,CAACH,MAAM,CAACK,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC,CAACI,OAAO,EAAE;IACtF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFpB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}