[{"/home/xkruzel/Desktop/todo/reactapp/src/index.js":"1","/home/xkruzel/Desktop/todo/reactapp/src/App.js":"2","/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js":"3","/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts":"4","/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx":"5","/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx":"6","/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx":"7","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js":"8","/home/xkruzel/Desktop/todo/reactapp/src/Point.js":"9","/home/xkruzel/Desktop/todo/reactapp/src/ChooseConfig.jsx":"10","/home/xkruzel/Desktop/todo/reactapp/src/Icons/AeonFileIcon.jsx":"11","/home/xkruzel/Desktop/todo/reactapp/src/Icons/ServerIcon.jsx":"12","/home/xkruzel/Desktop/todo/reactapp/src/Icons/JsonIcon.jsx":"13","/home/xkruzel/Desktop/todo/reactapp/src/Icons/CloseIcon.jsx":"14","/home/xkruzel/Desktop/todo/reactapp/src/Icons/InfoIcon.jsx":"15","/home/xkruzel/Desktop/todo/reactapp/src/Icons/ExclaimIcon.jsx":"16","/home/xkruzel/Desktop/todo/reactapp/src/Icons/CoffeeIcon.jsx":"17","/home/xkruzel/Desktop/todo/reactapp/src/Icons/DownloadIcon.jsx":"18","/home/xkruzel/Desktop/todo/reactapp/src/Icons/PlusIcon.jsx":"19","/home/xkruzel/Desktop/todo/reactapp/src/Icons/OnlyVisualiseIcon.jsx":"20","/home/xkruzel/Desktop/todo/reactapp/src/Icons/MinusIcon.jsx":"21","/home/xkruzel/Desktop/todo/reactapp/src/Icons/SendIcon.jsx":"22","/home/xkruzel/Desktop/todo/reactapp/src/utils.js":"23"},{"size":535,"mtime":1662399185904,"results":"24","hashOfConfig":"25"},{"size":2428,"mtime":1668204355206,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1662399185904,"results":"27","hashOfConfig":"25"},{"size":133,"mtime":1666511377116,"results":"28","hashOfConfig":"25"},{"size":2530,"mtime":1667548594386,"results":"29","hashOfConfig":"25"},{"size":9462,"mtime":1669483103929,"results":"30","hashOfConfig":"25"},{"size":5260,"mtime":1668203173665,"results":"31","hashOfConfig":"25"},{"size":13023,"mtime":1669492114933,"results":"32","hashOfConfig":"25"},{"size":111,"mtime":1669388111914,"results":"33","hashOfConfig":"25"},{"size":15353,"mtime":1669448233570,"results":"34","hashOfConfig":"25"},{"size":568,"mtime":1668153098085,"results":"35","hashOfConfig":"25"},{"size":880,"mtime":1667751780313,"results":"36","hashOfConfig":"25"},{"size":2318,"mtime":1667751781757,"results":"37","hashOfConfig":"25"},{"size":575,"mtime":1668152755788,"results":"38","hashOfConfig":"25"},{"size":751,"mtime":1667894717071,"results":"39","hashOfConfig":"25"},{"size":444,"mtime":1668152848686,"results":"40","hashOfConfig":"25"},{"size":2551,"mtime":1667751676431,"results":"41","hashOfConfig":"25"},{"size":628,"mtime":1667895265452,"results":"42","hashOfConfig":"25"},{"size":491,"mtime":1668153313933,"results":"43","hashOfConfig":"25"},{"size":639,"mtime":1667751744893,"results":"44","hashOfConfig":"25"},{"size":559,"mtime":1668153354557,"results":"45","hashOfConfig":"25"},{"size":578,"mtime":1668203403524,"results":"46","hashOfConfig":"25"},{"size":391,"mtime":1669451592329,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hunrvr",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/xkruzel/Desktop/todo/reactapp/src/index.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/App.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx",["120"],[],"import React from 'react';\nimport App from './App';\nimport { StateApp } from './StateApp.ts';\nimport ChooseConfig from './ChooseConfig';\nimport axios from \"axios\";\nimport CloseIcon from './Icons/CloseIcon';\nimport ExclaimIcon from './Icons/ExclaimIcon';\n\nexport default class LoadAeon extends React.Component {\n    state = {\n        value : this.props.value || StateApp.LoadAeon,\n        selectedFile: this.props.selectedFile || null,\n        isOpen: false,\n        sync: false,\n        async: false,\n    };\n  //  const [param_arguments, set_param_arguments] = useState();\n\n    onFileChange = event => {\n      // Update the state\n      this.setState({ selectedFile: event.target.files[0] });\n    };\n\n    // On file upload (click the upload button)\n    onFileUpload = () => {\n\n      if ((!this.state.sync && !this.state.async) || !this.state.selectedFile) {\n        this.openModal();\n        return;\n      }\n      \n      const file = this.state.selectedFile;\n\n      var reader = new FileReader();\n      reader.readAsText(file,'UTF-8');\n    \n      reader.addEventListener(\"load\", () => {\n          var r = reader.result;\n\n          var r_lines = r.split(\"\\n\");\n          const regex_comment = /^\\s*#/;\n          var result_data = [];\n          for (let i = 0; i < r_lines.length; i++) {\n            if (r_lines[i].match(regex_comment)) {\n              continue;\n            }\n            result_data.push(r_lines[i]);\n          }\n\n          this.setState({ file_read : result_data });\n          const result_data_joined = result_data.join(\" %% \");\n          document.cookie=\"resultData=\" + result_data_joined + \"; SameSite=None; Secure\";\n      });\n\n      this.setState({ value : StateApp.ChooseConfig });\n    };\n  \n    fileData = () => {    \n        if (this.state.selectedFile) {\n           \n          return (\n            <div>\n              <h2>File Details:</h2>\n               \n                <p>File Name: {this.state.selectedFile.name}</p>   \n            </div>\n          );\n        } else {\n          return (\n            <div>\n              <br />\n              <h6>Choose before Pressing the Process button</h6>\n            </div>\n          );\n        }\n    };\n\n    handleBackButton = event => {\n      this.setState({ value : StateApp.MainApp });\n    };\n\n    openModal = (event) => {\n      this.setState({ isOpen : true });\n    }\n\n    closeModal = (event) => {\n      this.setState({ isOpen : false });\n    }\n\n    render() {\n        if (this.state.value === StateApp.MainApp) {\n          return <App />;\n        }\n\n        \n        if (this.state.value === StateApp.ChooseConfig) {\n          return <ChooseConfig file_read={this.state.file_read} async={this.state.async} sync={this.state.sync} selectedFile={this.state.selectedFile}/>;\n        }\n\n        return (\n          <div class=\"row loadAEONwrapper\">\n            {this.state.isOpen &&\n                  <div>\n                    <div class=\"overlay_styles\"/>\n                    <div class=\"modal_styles\">\n                      <div class=\"row centeredTopRight\" onClick={this.closeModal}>\n                        <CloseIcon />\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-3\">\n                          <ExclaimIcon />\n                        </div>\n                        <div class=\"col-6\">\n                          File and at least one type is mandatory.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n              }\n            <div class=\"col\">\n              <div class=\"row\" className=\"App\">\n                <h3 class=\"wrapperh3\">\n                Type of Boolean network\n                </h3>\n                <form>\n                <div class=\"form-check form-check-inline\">\n                  <input type=\"checkbox\" class=\"cblack\" id=\"async\" name=\"semantics\" value=\"1\" onChange={event => this.setState({async : !this.state.async})}/>\n                  <label for=\"async\" class=\"form-check-label\">Asynchronous</label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n                  <input type=\"checkbox\" class=\"cblack\" id=\"sync\" name=\"semantics\" value=\"2\" onChange={event => this.setState({sync : !this.state.sync})}/>\n                  <label class=\"form-check-label\" for=\"sync\">Synchronous</label>\n                </div>\n                </form>\n              </div>\n\n              <br/>\n              <br/>\n\n              <div class=\"row\" className=\"App\">\n                <h3 class=\"wrapperh3\">\n                  File Upload\n                </h3>\n\n                <div class=\"col-lg-4 center\">\n                    <input type=\"file\" class=\"form-control center\" onChange={this.onFileChange} accept=\".aeon\"/>\n                    <button onClick={this.onFileUpload} class=\"btn-dark wrapperh3 btn-md btn\">\n                      Process\n                    </button>\n                </div>\n\n              {this.fileData()}\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-lg-2\">\n                <input type=\"submit\" value=\"Back\" class=\"btn-dark btn-md btn\" onClick={this.handleBackButton} />\n              </div>\n            </div>\n          </div>\n          );\n    }\n}\n","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js",["121","122","123","124","125","126"],[],"import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport * as dat from \"dat.gui\";\nimport { Point, createPoint } from \"./Point\";\nimport { Interaction } from \"three.interaction-fixed\";\nimport { dec2bin, rad2degrees } from \"./utils\";\n\n\n\nexport function init3Dgraphics(canvas, div, data, nodes_ids, h, w) {\n  if (data === undefined) {\n    return false;\n  }\n\n  const CYLINDER_HEIGHT = 8;\n  const number_of_nodes = Object.keys(nodes_ids).length;\n\n  const scene = new THREE.Scene();\n  //scene.background = new THREE.Color( 0xd3d3d3 );\n  scene.background = new THREE.Color(0xf8f2ea);\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    canvas.width / canvas.height,\n    0.1,\n    1000\n  );\n  const renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n  });\n\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(canvas.width, canvas.height); // full size\n  camera.position.setZ(30); // for better perspective\n  renderer.sortObjects = false;\n  renderer.render(scene, camera);\n\n  new Interaction(renderer, scene, camera);\n\n  // For showing text information about clusters\n  var texts = [];\n  var cylinders = [];\n\n  //const axesHelper = new THREE.AxesHelper(100);\n  //scene.add(axesHelper);\n\n  /*\n  const gui = new dat.GUI();\n  const options = {\n    sphereColor : 0xffea00,\n    wireframe: false,\n  };\n*/\n  const pointLight = new THREE.PointLight(0x818085);\n  pointLight.position.set(20, 20, 20);\n\n  const ambientLight = new THREE.AmbientLight(0xffffff);\n  ambientLight.position.set(20, 20, 20);\n\n  scene.add(pointLight, ambientLight);\n\n  //const lightHelper = new THREE.PointLightHelper(pointLight);  // shows position of lighsource\n  //const gridHelper = new THREE.GridHelper(30, 20);\n\n  //scene.add(lightHelper, gridHelper);\n\n  window.addEventListener(\"resize\", function () {\n    camera.aspect = canvas.width / canvas.height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(canvas.width);\n  });\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n\n  processClusters(scene, data);\n  data = null;\n\n  function animate() {\n    setTimeout(function () {\n      requestAnimationFrame(animate);\n    }, 1000 / 5);\n\n    controls.update();\n    renderer.render(scene, camera);\n    pointLight.position.copy(camera.position);\n  }\n\n  renderer.setAnimationLoop(animate);\n\n  window.addEventListener(\"resize\", function () {\n    camera.aspect = canvas.width / canvas.width;\n    camera.updateProjectionMatrix();\n    renderer.setSize(canvas.width, canvas.width);\n  });\n\n  function calcColor(max, val, cluster) {\n    if (cluster[\"Backs\"].length > 0) {\n      return \"hsla(259, 20%, 30%, 1)\";\n    }\n\n    return \"hsla(255, 0%, 46%, 1)\";\n    /*\n    const min = 0\n    var minHue = 240, maxHue=0;\n    var curPercent = (val - min) / (max-min);\n    var colString = \"hsl(\" + ((curPercent * (maxHue-minHue) ) + minHue) + \",65%,50%)\";\n    return colString;\n    */\n  }\n\n  function resetOpacity() {\n    cylinders.forEach(function (cylinder) {\n      const newMaterial = cylinder.material.clone();\n      newMaterial.transparent = false;\n      newMaterial.opacity = 1;\n      cylinder.material = newMaterial;\n    });\n  }\n\n  function crossProduct(a, b) {\n    return new THREE.Vector3(\n      a.y * b.z - a.z * b.y,\n      a.z * b.x - a.x * b.z,\n      a.x * b.y - a.y * b.x\n    );\n  }\n\n  function createCylinder(\n    data,\n    id,\n    startPoint,\n    endPoint,\n    currRadius,\n    nextRadius,\n    rank,\n    rank_max\n  ) {\n    console.log(id);\n    const color = new THREE.Color(\n      data[id][\"Color\"] === \"\" ? calcColor(rank_max, rank, data[id]) : data[id][\"Color\"]\n    );\n    //color.setHex(rank/10 * 0xffffff );\n    // color.setHex(rank/10 * 0xffffff );\n\n    var cylinderMesh = function (\n      startPoint,\n      endPoint,\n      midPoint,\n      currRadius,\n      nextRadius,\n      color\n    ) {\n      /* edge from X to Y */\n      const direction = new THREE.Vector3().subVectors(endPoint, startPoint);\n\n      const orientation = new THREE.Matrix4();\n      /* THREE.Object3D().up (=Y) default orientation for all objects */\n      orientation.lookAt(startPoint, endPoint, new THREE.Object3D().up);\n\n      /* rotation around axis X by -90 degrees\n       * matches the default orientation Y\n       * with the orientation of looking Z */\n      const mat = new THREE.Matrix4();\n      mat.set(1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1);\n      orientation.multiply(mat);\n\n      /* cylinder: radiusAtTop, radiusAtBottom, \n          height, radiusSegments, heightSegments */\n      const RADIAL_SEGMENTS = 8;\n      const HEIGHT_SEGMENTS = 1;\n      const edgeGeometry = new THREE.CylinderGeometry(\n        currRadius,\n        nextRadius,\n        CYLINDER_HEIGHT,\n        RADIAL_SEGMENTS,\n        HEIGHT_SEGMENTS\n      );\n\n      const material = new THREE.MeshPhongMaterial({ color: color, flatShading: true });\n      const cylinder = new THREE.Mesh(\n        edgeGeometry,\n        material\n      );\n\n      cylinder.applyMatrix4(orientation);\n      cylinder.position.set(midPoint.x, midPoint.y, midPoint.z);\n      cylinder.cursor = \"pointer\";\n      cylinder.on(\"click\", function (ev) {\n        resetOpacity();\n        const newMaterial = cylinder.material.clone();\n        newMaterial.transparent = true;\n        newMaterial.opacity = 0.5;\n        cylinder.material = newMaterial;\n\n        texts.forEach(function (text) {\n          var selectedObject = scene.getObjectByName(text.name);\n          scene.remove(selectedObject);\n        });\n\n        var text = \"\";\n        data[id][\"Nodes\"].forEach(function (elem) {\n          if (text !== \"\") {\n            text += \",\";\n          }\n          text += \" (\";\n          const bin = dec2bin(elem, number_of_nodes);\n\n          for (let i = 0; i < bin.length; i++) {\n            if (bin[i] === \"1\") {\n              text += \" \" + nodes_ids[i];\n            }\n          }\n          text += \" )\";\n        });\n\n        div.innerHTML =\n          \"<b>Rank</b>: \" + data[id][\"Rank\"] + \"<br><b>Nodes</b>: \" + text;\n      });\n\n      return cylinder;\n    };\n\n    const midPoint = new Point(\n      (startPoint.x + endPoint.x) / 2,\n      (startPoint.y + endPoint.y) / 2,\n      (startPoint.z + endPoint.z) / 2\n    );\n    return cylinderMesh(\n      startPoint,\n      endPoint,\n      midPoint,\n      currRadius,\n      nextRadius,\n      color\n    ); //new THREE.Mesh(geometryCyl, material);\n  }\n\n  function getChildsChilds(data, cluster) {\n    var childsChildCount = 0;\n    for (var i = 0; i < cluster[\"Desc\"].length; ++i) {\n      childsChildCount += data[cluster[\"Desc\"][i]].NodeCount;\n    }\n\n    if (cluster[\"Separate\"] !== undefined) {\n      childsChildCount = data[cluster[\"Separate\"]].NodeCount;\n    }\n\n    return childsChildCount;\n  }\n\n  function createLine(p1, p2, color) {\n    const material = new THREE.LineBasicMaterial( { color: color } );\n    const geometry = new THREE.BufferGeometry().setFromPoints( [p1, p2] );\n    const line = new THREE.Line( geometry, material );\n    scene.add( line );\n  }\n\n  function createCoordinatesForSingleSon(point, prevPoint, id) {\n    const dirVector = new THREE.Vector3(\n      point.x - prevPoint.x,\n      point.y - prevPoint.y,\n      point.z - prevPoint.z\n    );\n\n    var newStartPoint = new Point(point.x, point.y, point.z); // to make copy\n    const newPoint = new Point(\n      dirVector.x + point.x,\n      dirVector.y + point.y,\n      dirVector.z + point.z\n    );\n\n    return Object.freeze({\n      id: id, //cluster[\"Desc\"][0],\n      prevPoint: newStartPoint,\n      point: newPoint,\n    });\n  }\n\n  // prevPoint, point - upper and downer middle points of cylinder\n  // dirPoint - point to which direction of cylinder (dir vector) should go\n  function clustering(\n    scene,\n    data,\n    id,\n    max_branching,\n    prevPointFirst,\n    pointFirst,\n    biggestRank\n  ) {\n    if (id === undefined) {\n      console.log(\"Id is undefined in clustering\");\n      return;\n    }\n    const firstId = id;\n\n    var tuple = Object.freeze({\n      id: id,\n      prevPoint: prevPointFirst,\n      point: pointFirst,\n    });\n    var stack = [tuple];\n\n  // to change direction of descendant for situations when cluster has \"Separate\" and only 1 other descendant\n  // according this the position is swiped from left to right - alternating\n    var last_dir_right = false;\n\n    while (stack.length > 0) {\n      const stackElement = stack.pop();\n      const current = stackElement.id;\n      const prevPoint = stackElement.prevPoint;\n      const point = stackElement.point;\n\n      var cluster = data[current];\n      const childCount = cluster[\"Desc\"].length;\n\n      console.log(current);\n\n      var childsChildCount = getChildsChilds(data, cluster);\n\n      const upperRadius = cluster.NodeCount;\n      const lowerRadius =\n        childCount === 1\n          ? childsChildCount\n          : childsChildCount + cluster[\"Desc\"].length + (cluster[\"Separate\"] !== undefined ? 1 : 0);\n\n      var cylinder = createCylinder(\n        data,\n        current,\n        prevPoint,\n        point,\n        upperRadius,\n        lowerRadius,\n        data[current][\"Rank\"],\n        biggestRank\n      );\n\n      cylinders.push(cylinder);\n      scene.add(cylinder);\n\n      var dirVector = new THREE.Vector3(\n        point.x - prevPoint.x,\n        point.y - prevPoint.y,\n        point.z - prevPoint.z\n      );\n\n      if (cluster[\"Separate\"] !== undefined) {\n          stack.push( createCoordinatesForSingleSon(point, prevPoint, cluster[\"Separate\"]) );\n      }\n\n      for (var i = 0; i < childCount; ++i) {\n\n        if (childCount === 1 && cluster[\"Separate\"] === undefined) {\n          stack.push( createCoordinatesForSingleSon(point, prevPoint, cluster[\"Desc\"][0]) );\n          continue;\n        }\n\n        const uVector = new THREE.Vector3((-1) * dirVector.y, dirVector.x, 0).normalize();\n\n        const adota = uVector.dot(uVector);\n        const crossProductVec = crossProduct(dirVector, uVector);\n        const vVector = crossProductVec.divideScalar(adota).normalize();\n\n        // COMPUTE NEW COORDINATES around circle\n        var theta = (2*Math.PI / childCount) * i;\n        if (childCount === 1) {\n          if (last_dir_right === true) {\n            theta = Math.PI; // not 0 but 180\n          }\n          last_dir_right = !last_dir_right;\n        }\n\n        const sin = Math.sin(theta);\n        const cos = Math.cos(theta);\n\n        const u = uVector.multiplyScalar(cos * lowerRadius);\n        const v = vVector.multiplyScalar(sin * lowerRadius);\n\n        var newStartPointHelper = u\n          .add(v)\n          .add(new THREE.Vector3(point.x, point.y, point.z));\n\n\n        // Vector which will be prolonged from prevPoint to newStartPointer -> to create newEndPoint\n        const vector = new THREE.Vector3(\n          newStartPointHelper.x - prevPoint.x,\n          newStartPointHelper.y - prevPoint.y,\n          newStartPointHelper.z - prevPoint.z\n        ).normalize();\n\n        const newEndPoint = new Point(\n          newStartPointHelper.x + CYLINDER_HEIGHT * vector.x,\n          newStartPointHelper.y + CYLINDER_HEIGHT * vector.y,\n          newStartPointHelper.z + CYLINDER_HEIGHT * vector.z\n        );\n\n        tuple = Object.freeze({\n          id: cluster[\"Desc\"][i],\n          prevPoint: newStartPointHelper,\n          point: newEndPoint,\n        });\n        stack.push(tuple);\n      }\n    }\n  }\n\n  function compMaxBranching(data, key) {\n    let stack = [key];\n    var maximums = {};\n    var colors = {};\n\n    while (stack.length > 0) {\n      const current = stack.pop();\n      colors[current] = \"G\";\n      stack.push(current);\n\n      if (maximums[current] === undefined) {\n        maximums[current] = 0;\n      }\n\n      var count_black = 0;\n      const desc_count = data[current][\"Desc\"].length;\n      for (var i = 0; i < desc_count; ++i) {\n        if (colors[data[current][\"Desc\"][i]] === undefined) {\n          stack.push(data[current][\"Desc\"][i]);\n        }\n\n        if (colors[data[current][\"Desc\"][i]] === \"B\") {\n          count_black += 1;\n          maximums[current] = Math.max(\n            maximums[data[current][\"Desc\"][i]],\n            maximums[current]\n          );\n        }\n      }\n\n      if (count_black === desc_count) {\n        colors[current] = \"B\";\n        stack.pop();\n\n        if (desc_count > 1) {\n          maximums[current] += 1;\n        }\n      }\n    }\n\n    return maximums[key];\n  }\n\n  function processClusters(scene, data) {\n    var root_cluster_key = undefined;\n    var biggestRank = 0;\n    Object.entries(data).forEach(([k, v]) => {\n      if (v[\"Rank\"] === 0) {\n        root_cluster_key = k;\n      }\n      biggestRank = Math.max(v[\"Rank\"], biggestRank);\n    });\n\n    const max_branching = compMaxBranching(data, root_cluster_key);\n\n    const firstHeight = (biggestRank * CYLINDER_HEIGHT) / 2 + CYLINDER_HEIGHT;\n    const firstStartPoint = new Point(0, firstHeight, 0);\n    const firstEndPoint = new Point(0, firstHeight - CYLINDER_HEIGHT, 0);\n\n    clustering(\n      scene,\n      data,\n      root_cluster_key,\n      max_branching,\n      firstStartPoint,\n      firstEndPoint,\n      biggestRank\n    );\n  }\n}\n","/home/xkruzel/Desktop/todo/reactapp/src/Point.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/ChooseConfig.jsx",["127"],[],"import './App.css';\nimport React from 'react';\nimport Visualise from './Visualise';\nimport App from './App';\nimport LoadAeon from './LoadAeon';\nimport { StateApp } from './StateApp.ts';\nimport axios from \"axios\";\n\nimport CoffeeIcon from './Icons/CoffeeIcon';\nimport DownloadIcon from './Icons/DownloadIcon';\nimport OnlyVisualiseIcon from './Icons/OnlyVisualiseIcon';\nimport CloseIcon from './Icons/CloseIcon';\nimport ExclaimIcon from './Icons/ExclaimIcon';\nimport PlusIcon from './Icons/PlusIcon';\nimport MinusIcon from './Icons/MinusIcon';\nimport SendIcon from './Icons/SendIcon';\n\n\nlet param_arguments = {};\nlet param_lines = {};\n\nclass ChooseConfig extends React.Component {\n  state = {\n    value : this.props.value || StateApp.ChooseConfig,\n    checked_nodes : [],\n    compute: false,\n    asked : false,\n    param_arguments: {},\n    param_count : 1,\n    isOpen: false,\n    shouldHide: [],\n  };\n\n   handleCheckSyntax = (event) => {\n      const name = event.currentTarget.id;\n      const element = event.target;\n      const parent_id = element.closest(\"ul\").getAttribute(\"id\").split('_');\n      param_arguments[parent_id[1]][name] = event.target.value; // TODO syntax check\n      \n      if (this.state.number_of_nodes === undefined) {\n        this.setState({ number_of_nodes : Object.keys(this.state.nodes).length });\n      }\n\n      const line = param_arguments[parent_id[1]][name];\n\n      if (line.length === 0) {\n        element.classList = [];\n      } else {\n        axios\n          .get(\"http://127.0.0.1:8000/check_syntax\", { params:\n              {\n                line : line,\n                nodes: this.state.nodes,\n                n : this.state.number_of_nodes,\n                } })\n          .then(response => {\n            if (response.data === true) {\n              element.classList = ['greenshadow'];\n            } else {\n              element.classList = ['redshadow'];\n            }\n        });\n      }\n    };\n\n    handleBackButton = event => {\n      this.setState({ value : StateApp.LoadAeon });\n    };\n\n    handleNodesButton = event => {\n\n      const greens = document.getElementsByClassName('greenshadow');\n      if (this.state.params !== undefined && greens.length !== this.state.param_count * this.state.params.size) {\n        this.openModal();\n        return;\n      }\n\n      event.preventDefault();\n      this.setState({ compute : true });\n\n      if (this.state.params !== undefined) {\n        for (let c = 0; c < this.state.param_count; ++c) {\n          this.state.params.forEach((value, key) => {\n            \n            const expresion_arr = value[\"expr\"].split(\"___parametrization___\");\n            var expr_snd = '';\n            if (expresion_arr.length > 1) {\n              expr_snd = expresion_arr[1];\n            }\n\n            if (param_lines[c] === undefined) {\n              param_lines[c] = []\n            }\n\n            param_lines[c].push( \"$\" + key + \" : \" + expresion_arr[0] + \" \" + param_arguments[c][key] + \" \" + expr_snd );\n          });\n        }\n      }\n    };\n\n     handleOnChange = (event, name) => {\n      var checked = this.state.checked_nodes;\n\n      if (event.target.checked) {\n        checked.push(name);\n      } else {\n        checked = checked.filter(function(value) {\n          return value != name;\n        });\n      }\n      this.setState({ checked_nodes: checked });\n    };\n\n    handleNoSave = () => {\n      this.setState({ asked : true });\n    }\n\n    handleSave = () => {\n      const element = document.createElement(\"a\");\n\n      const file = new Blob([this.state.clusters],\n        {\n          type:\"text/plain;charset=utf-8\"\n        });\n\n      element.href = URL.createObjectURL(file);\n      element.download = \"data.json\";\n      document.body.appendChild(element);\n      element.click();\n\n      this.setState({ asked : true });\n    }\n\n    addParam = (event) => {\n      event.preventDefault();\n      this.setState({ param_count : this.state.param_count + 1 });\n    }\n\n    hideParam = (event, c) => {\n      event.preventDefault();\n      var shouldHide = this.state.shouldHide;\n      shouldHide[c] = true;\n      this.setState({ shouldHide: shouldHide, param_count : this.state.param_count - 1 });\n    }\n\n    openModal = (event) => {\n      this.setState({ isOpen : true });\n    }\n\n    closeModal = (event) => {\n      this.setState({ isOpen : false });\n    }\n\n  render() {\n\n    if (this.state.value === StateApp.MainApp) {\n      return <App />\n    }\n\n    if (this.state.value === StateApp.LoadAeon) {\n      return <LoadAeon />\n    }\n\n    if (this.state.error) {\n      return   <div class=\"row\">\n                <div class=\"col-4-lg btn wrapper\"></div>\n                <div class=\"col-4-lg btn wrapper\">\n                    <ExclaimIcon />\n                    <h3 class=\"wrapperh3\">Error</h3>\n                    <p>Please check your input file and try again.</p>\n                </div>\n                <div class=\"col-4-lg btn wrapper\"></div>\n              </div>\n    }\n\n    if (this.state.value === StateApp.Visualise) {\n\n          // Ask to save data\n          const clusters_parsed = JSON.parse(this.state.clusters);\n\n          if (this.state.asked === true) {\n            return <Visualise fileData={clusters_parsed} />;\n          }\n          return (\n            <div>\n              <div class=\"row height-100\"></div>\n              <div class=\"row height-200 \">\n                <form onSubmit={this.handleSubmit}> \n\n                <div class=\"col-lg-6 btn wrapper\" onClick={this.handleSave} >\n                  <DownloadIcon />\n                  <br/>\n                  <h3 class=\"wrapperh3\">Download</h3>\n                  <p>Download precomputed clusters as JSON file.</p>\n                </div>\n\n                <div class=\"col-lg-6 btn wrapper\" onClick={this.handleNoSave} >\n                  <OnlyVisualiseIcon />\n                  <br/>\n                  <h3 class=\"wrapperh3\">Only visualize</h3>\n                  <p>Only visualise without saving precomputed data.</p>\n                </div>\n\n                </form>\n              </div>\n            </div>\n                      \n          );\n    }  \n\n    if (!this.state.nodes && this.props.file_read) {\n        const data_params = {\n          file_data : this.props.file_read.join(\" %% \"),\n        };\n\n        axios\n            .get(\"http://127.0.0.1:8000/get_nodes\", { params: data_params })\n            .then(response => {\n                if (response.data === \"\" || !response.data) {\n                  this.setState({ error : true });\n                  return;\n                }\n                const result = JSON.parse(response.data);\n                this.setState({ nodes : result[\"nodes\"] });\n\n                if (result[\"parametrization\"] !== undefined) {\n                    this.setState({ params : new Map(Object.entries(result[\"parametrization\"]))});\n                }\n\n            });\n        return (\n              <div class=\"row\">\n                <div class=\"col-4-lg btn wrapper\"></div>\n                <div class=\"col-4-lg btn wrapper\">\n                    <CoffeeIcon />\n                    <h3 class=\"wrapperh3\">Loading nodes</h3>\n                </div>\n                <div class=\"col-4-lg btn wrapper\"></div>\n              </div>\n        );\n    }\n\n    if (this.state.nodes && this.state.compute === false) {\n\n        var parametrization_selection;\n        const counts = Array.from(Array(this.state.param_count).keys());\n\n        if (this.state.params !== undefined) {\n\n          counts.forEach((c) => {\n            if (param_arguments[c] === undefined) {\n              param_arguments[c] = {};\n            }\n          });\n\n          if (this.state.shouldHide === undefined) {\n            this.setState({ shouldHide : counts.map( x => false ) });\n          }\n\n          if (this.state.shouldHide.length < counts.length) {\n            for (let i = 0; i < counts.length - this.state.shouldHide.length; i++) {\n                this.state.shouldHide.push(false);\n            }\n          }\n\n          var lis = [];\n          this.state.params.forEach((value, name) => {\n            lis.push(\n                <li key={name}>\n                  <b>{name}</b>:\n                  <br/>\n                  <i>expression</i>: {value[\"expr\"]}\n                  <br/>\n                  <i>can be parametrized by:</i> {value[\"args\"]}\n                  <br/>\n                  <input type=\"text\" name={name} id={name} onChange={this.handleCheckSyntax}/>\n                </li>);\n          });\n\n            parametrization_selection = <div className=\"App\">\n                                            <h3>Add parametrization</h3>\n                                            <p>\n                                              Your expression will be added instead of '___parametrization___'.\n                                            </p>\n                                            <div class=\"row back\">\n                                            {\n                                              counts.map(c => {\n                                                var minus;\n                                                if (c === counts.length - 1 && c !== 0) {\n                                                  minus = (\n                                                    <span class=\"col-lg-1\" title=\"Delete parametrization\" onClick={(e) => this.hideParam(e, c)} >\n                                                      <MinusIcon />\n                                                    </span>\n                                                  );\n                                                }\n\n                                                return (\n                                                <div class=\"col back\" className={this.state.shouldHide[c] === true ? 'hidden' : undefined}>\n                                                  <h5>\n                                                    No. {c + 1} &nbsp; {minus}\n                                                  </h5>\n                                                  <ul id={'param_' + c}>\n                                                    {\n                                                      lis.map(li => {\n                                                        return li;\n                                                      }, this)\n                                                    }\n                                                  </ul>\n                                                </div>);\n                                              }, this)\n                                            }\n                                              <div class=\"col-lg-1\" onClick={this.addParam} title=\"Add parametrization\" >\n                                                <PlusIcon />\n                                              </div>\n                                            </div>\n                                          </div>\n            }\n    }\n\n    if (this.state.nodes && (!this.state.parsed_nodes_keys || this.state.parsed_nodes_keys === null)) {\n        const nodes_keys = Object.keys(this.state.nodes);\n        this.setState({parsed_nodes_keys : nodes_keys});\n    }\n\n    if (this.state.parsed_nodes_keys && this.state.compute === false) {\n\n        const nodes_selection = <div className=\"App\">\n                                <h3>Select nodes</h3>\n                                {this.state.parsed_nodes_keys.map(name => {\n                                    return (\n                                    <div>\n                                        <input\n                                        type=\"checkbox\"\n                                        id={`custom-checkbox-${name}`}\n                                        name={name}\n                                        value={name}\n                                        onChange={ (event) => { this.handleOnChange(event, name) }}\n                                        class=\"cblack\"\n                                        />\n                                        <label htmlFor={`custom-checkbox-${name}`}>&nbsp;{name}</label>\n                                    </div>\n                                    );\n                                })}\n                            </div>;\n    \n\n        return (\n            <div class=\"back\">\n\n              {this.state.isOpen &&\n                  <div>\n                    <div class=\"overlay_styles\"/>\n                    <div class=\"modal_styles\">\n                      <div class=\"row centeredTopRight\" onClick={this.closeModal}>\n                        <CloseIcon />\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-3\">\n                          <ExclaimIcon />\n                        </div>\n                        <div class=\"col-6\">\n                          Some parametrizations are not written correctly.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n              }\n              <form>\n                  {nodes_selection}\n                  {parametrization_selection}\n\n              </form>\n              <br/>\n                <div class=\"row\">\n                  <div className=\"App\">\n                    <button type=\"submit\" value=\"Send\" class=\"btn-dark wrapperh3 btn-md btn \" onClick={this.handleNodesButton} >\n                      <SendIcon />&nbsp;Send\n                    </button>\n                  </div>\n                  </div>\n              <div class=\"row back\">\n                <div class=\"col-lg-2\">\n                  <input type=\"submit\" value=\"Back\" class=\"btn-dark btn-md btn\" onClick={this.handleBackButton} />\n                </div>\n              </div>\n            </div>\n        );                      \n    }\n\n    if (this.state.compute) {\n        const result_data_joined = this.props.file_read.join(\" %% \");\n\n        const nodes = this.state.checked_nodes.join(',');\n        var data_params = {\n            file_data: result_data_joined,\n            semantics: (this.props.async ? (this.props.sync ? \"async,sync\" : \"async\") : \"sync\"),\n            nodes: nodes\n        }\n        \n        if (param_lines !== {}) {\n            const param_lines_json = JSON.stringify(param_lines);\n            data_params['params'] = param_lines_json;              \n        }\n\n        axios\n            .get(\"http://127.0.0.1:8000/get_data/\", { params: data_params })\n            .then(response => {\n              if (response.data === \"\" || !response.data) {\n                this.setState({ error : true });\n                return;\n              }\n              \n              this.setState({ clusters : response.data });\n              this.setState({ value : StateApp.Visualise });\n            });\n\n        return (\n        <div class=\"row\">\n          <div class=\"col-4-lg btn wrapper\"></div>\n          <div class=\"col-4-lg btn wrapper\">\n              <CoffeeIcon />\n              <h3 class=\"wrapperh3\">Sending request</h3>\n          </div>\n          <div class=\"col-4-lg btn wrapper\"></div>\n        </div>\n        );\n    }        \n          \n    return (\n    <div class=\"row\">\n      <div class=\"col-4-lg btn wrapper\"></div>\n      <div class=\"col-4-lg btn wrapper\">\n          <CoffeeIcon />\n          <h3 class=\"wrapperh3\">Waiting for computation</h3>\n      </div>\n      <div class=\"col-4-lg btn wrapper\"></div>\n    </div>\n    );\n\n\n  }\n}\n \nexport default ChooseConfig;\n\n","/home/xkruzel/Desktop/todo/reactapp/src/Icons/AeonFileIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/ServerIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/JsonIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/CloseIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/InfoIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/ExclaimIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/CoffeeIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/DownloadIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/PlusIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/OnlyVisualiseIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/MinusIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Icons/SendIcon.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/utils.js",[],[],{"ruleId":"128","severity":1,"message":"129","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":13},{"ruleId":"128","severity":1,"message":"132","line":3,"column":13,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"128","severity":1,"message":"133","line":4,"column":17,"nodeType":"130","messageId":"131","endLine":4,"endColumn":28},{"ruleId":"128","severity":1,"message":"134","line":6,"column":19,"nodeType":"130","messageId":"131","endLine":6,"endColumn":30},{"ruleId":"128","severity":1,"message":"135","line":153,"column":13,"nodeType":"130","messageId":"131","endLine":153,"endColumn":22},{"ruleId":"128","severity":1,"message":"136","line":250,"column":12,"nodeType":"130","messageId":"131","endLine":250,"endColumn":22},{"ruleId":"128","severity":1,"message":"137","line":293,"column":11,"nodeType":"130","messageId":"131","endLine":293,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":108,"column":24,"nodeType":"140","messageId":"141","endLine":108,"endColumn":26},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'dat' is defined but never used.","'createPoint' is defined but never used.","'rad2degrees' is defined but never used.","'direction' is assigned a value but never used.","'createLine' is defined but never used.","'firstId' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]