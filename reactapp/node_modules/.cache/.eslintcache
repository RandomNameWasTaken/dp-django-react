[{"/home/xkruzel/Desktop/todo/reactapp/src/index.js":"1","/home/xkruzel/Desktop/todo/reactapp/src/App.js":"2","/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js":"3","/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts":"4","/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx":"5","/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx":"6","/home/xkruzel/Desktop/todo/reactapp/src/Create.jsx":"7","/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx":"8","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js":"9","/home/xkruzel/Desktop/todo/reactapp/src/Point.js":"10"},{"size":535,"mtime":1662399185904,"results":"11","hashOfConfig":"12"},{"size":1751,"mtime":1662480607138,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1662399185904,"results":"14","hashOfConfig":"12"},{"size":127,"mtime":1662402289635,"results":"15","hashOfConfig":"12"},{"size":2260,"mtime":1663009780383,"results":"16","hashOfConfig":"12"},{"size":1359,"mtime":1663407116647,"results":"17","hashOfConfig":"12"},{"size":568,"mtime":1662402288407,"results":"18","hashOfConfig":"12"},{"size":8063,"mtime":1663402506654,"results":"19","hashOfConfig":"12"},{"size":10602,"mtime":1663539221175,"results":"20","hashOfConfig":"12"},{"size":111,"mtime":1661080761641,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13dspl9",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/xkruzel/Desktop/todo/reactapp/src/index.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/App.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Create.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx",["53"],[],"import React from 'react';\nimport App from './App';\nimport { StateApp } from './StateApp.ts';\nimport Visualise from './Visualise';\nimport axios from \"axios\";\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class LoadAeon extends React.Component {\n    state = {\n        value : this.props.value || StateApp.LoadAeon,\n        selectedFile: null,\n\n        semantics: null,\n        option: null,\n\n        json_data:null,\n        checked_nodes : [],\n\n        parsed_nodes_keys: null,\n        nodes: null,\n\n        compute: false,\n        clusters: null,\n        asked : false,\n    };\n\n    onFileChange = event => {\n        // Update the state\n        this.setState({ selectedFile: event.target.files[0] });\n    };\n\n    // On file upload (click the upload button)\n    onFileUpload = () => {\n          const file = this.state.selectedFile;\n  \n          var reader = new FileReader();\n          reader.readAsText(file,'UTF-8');\n       \n          reader.addEventListener(\"load\", () => {\n              var r = reader.result;\n\n              var r_lines = r.split(\"\\n\");\n              const regex_comment = /^\\s*#/;\n              var result_data = [];\n              for (let i = 0; i < r_lines.length; i++) {\n                if (r_lines[i].match(regex_comment)) {\n                  continue;\n                }\n                result_data.push(r_lines[i]);\n              }\n\n              const result_data_joined = result_data.join(\" %% \");\n              document.cookie=\"resultData=\" + result_data_joined + \"; SameSite=None; Secure\";\n          });\n\n        this.setState({ value : StateApp.Config });\n      };\n  \n\n    fileData = () => {    \n        if (this.state.selectedFile) {\n           \n          return (\n            <div>\n              <h2>File Details:</h2>\n               \n                <p>File Name: {this.state.selectedFile.name}</p>\n                <p>File Type: {this.state.selectedFile.type}</p>\n   \n            </div>\n          );\n        } else {\n          return (\n            <div>\n              <br />\n              <h4>Choose before Pressing the Upload button</h4>\n            </div>\n          );\n        }\n    };\n\n    handleBackButton = event => {\n      this.setState({ value : StateApp.MainApp });\n    };\n\n    handleSemanticsButton = event => {\n      event.preventDefault();\n      this.setState({ semantics : this.state.async ? 1 : 2 });\n      this.setState({ option : this.state.node ? 1 : 2 });\n    };\n\n    handleNodesButton = event => {\n      event.preventDefault();\n      this.render();\n\n      this.setState({ compute : true });\n    };\n\n    handleOnChange = (event, name) => {\n      var checked = this.state.checked_nodes;\n\n      if (event.target.checked) {\n        checked.push(name);\n      } else {\n        checked = checked.filter(function(value) {\n          return value === name;\n        });\n      }\n      this.setState({ checked_nodes: checked });\n    };\n\n    handleNoSave = () => {\n      this.setState({ asked : true });\n    }\n\n    handleSave = () => {\n      const element = document.createElement(\"a\");\n\n      const file = new Blob([this.state.clusters],\n        {\n          type:\"text/plain;charset=utf-8\"\n        });\n\n      element.href = URL.createObjectURL(file);\n      element.download = \"data.json\";\n      document.body.appendChild(element);\n      element.click();\n\n      this.setState({ asked : true });\n    }\n\n\n    render() { \n        if (this.state.value === StateApp.MainApp) {\n          return <App />;\n        }\n\n        if (this.state.value === StateApp.Visualise) {\n\n          // Ask to save data\n          const clusters_parsed = JSON.parse(this.state.clusters);\n\n          if (this.state.asked === true) {\n         //   console.log(clusters_parsed);\n            return <Visualise fileData={clusters_parsed} />;\n          }\n          return (\n            <div>\n              <h3>Do you want to save json file before visualisation?</h3>\n              <br/>\n              <button onClick={this.handleSave}>Yes</button>\n              <button onClick={this.handleNoSave}>No, only visualise</button>\n\n            </div>\n          );\n        }  \n        \n        if (this.state.value === StateApp.Config) {\n\n          if (this.state.semantics === null) {\n            return (\n            <form>\n              <input type=\"radio\" id=\"async\" name=\"semantics\" value=\"1\" onChange={event => this.setState({async : true, sync: false})}/>\n              <label for=\"async\">Async</label>\n              <input type=\"radio\" id=\"sync\" name=\"semantics\" value=\"2\" onChange={event => this.setState({sync : true, async: false})}/>\n              <label for=\"sync\">Sync</label>\n              <br/>\n              <input type=\"radio\" id=\"node\" name=\"option\" value=\"1\" onChange={event => this.setState({node : true, whole: false})}/>\n              <label for=\"node\">from one node</label>\n              <input type=\"radio\" id=\"whole\" name=\"option\" value=\"2\" onChange={event => this.setState({whole : true, node: false})}/>\n              <label for=\"whole\">whole state space</label>\n              <input type=\"submit\" value=\"Send\" onClick={this.handleSemanticsButton} />\n            </form>);\n          }\n\n          if (this.state.option === 1 && !this.state.nodes) {\n              axios\n              .get(\"http://127.0.0.1:8000/get_nodes\")\n              .then(response => {\n                const nodes = JSON.parse(response.data);\n                this.setState({ nodes : nodes });\n              });\n            return (\n                <h3>Getting nodes</h3>\n            );\n          }\n\n          if (this.state.option === 1 && this.state.nodes && this.state.compute === false) {\n\n            if (!this.state.parsed_nodes_keys) {\n              const nodes_keys = Object.keys(this.state.nodes);\n              this.setState({parsed_nodes_keys : nodes_keys});\n            }\n\n            return (\n              <div className=\"App\">\n                <h3>Select nodes</h3>\n                <form>\n                  {this.state.parsed_nodes_keys.map(name => {\n                    return (\n                      <div>\n                        <input\n                          type=\"checkbox\"\n                          id={`custom-checkbox-${name}`}\n                          name={name}\n                          value={name}\n                          onChange={ (event) => { this.handleOnChange(event, name) }}\n                        />\n                        <label htmlFor={`custom-checkbox-${name}`}>{name}</label>\n                      </div>\n                    );\n                  })}\n                <input type=\"submit\" value=\"Send\" onClick={this.handleNodesButton} />\n                </form>\n              </div>\n            );\n          }\n\n          if (this.state.compute) {\n            const nodes = this.state.checked_nodes.join(',');\n            const params = \"semantics=\" + this.state.semantics\n                          + \"&option=\" + this.state.option\n                          + (nodes !== \"\" ? \"&nodes=\" + nodes : \"\");\n\n            axios\n              .get(\"http://127.0.0.1:8000/get_data?\" + params)\n              .then(response => {\n                this.setState({ clusters : response.data });\n                this.setState({ value : StateApp.Visualise });\n                });\n            \n            return (\n            <div>\n              <h3>Sending request</h3>\n            </div>\n            );\n          }        \n          \n          return (\n            <div>\n              <h3>Waiting for computation</h3>\n            </div>\n          );\n          \n        }\n\n        return (\n            <div>\n                <h3>\n                  File Upload\n                </h3>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} accept=\".aeon\"/>\n                    <button onClick={this.onFileUpload}>\n                      Process\n                    </button>\n                </div>\n              {this.fileData()}\n\n              <input type=\"submit\" value=\"Back\" onClick={this.handleBackButton} />\n            </div>\n          );\n    }\n}\n","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js",["54","55","56","57","58","59","60","61","62"],[],"/home/xkruzel/Desktop/todo/reactapp/src/Point.js",[],[],{"ruleId":"63","severity":1,"message":"64","line":7,"column":10,"nodeType":"65","messageId":"66","endLine":7,"endColumn":15},{"ruleId":"63","severity":1,"message":"67","line":28,"column":9,"nodeType":"65","messageId":"66","endLine":28,"endColumn":12},{"ruleId":"63","severity":1,"message":"68","line":29,"column":9,"nodeType":"65","messageId":"66","endLine":29,"endColumn":16},{"ruleId":"63","severity":1,"message":"69","line":121,"column":12,"nodeType":"65","messageId":"66","endLine":121,"endColumn":24},{"ruleId":"70","severity":1,"message":"71","line":158,"column":12,"nodeType":"72","messageId":"73","endLine":158,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":192,"column":16,"nodeType":"65","messageId":"76","endLine":192,"endColumn":17},{"ruleId":"70","severity":1,"message":"71","line":194,"column":24,"nodeType":"72","messageId":"73","endLine":194,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":263,"column":23,"nodeType":"72","messageId":"73","endLine":263,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":282,"column":21,"nodeType":"72","messageId":"73","endLine":282,"endColumn":23},{"ruleId":"63","severity":1,"message":"77","line":291,"column":9,"nodeType":"65","messageId":"66","endLine":291,"endColumn":18},"no-unused-vars","'sleep' is defined but never used.","Identifier","unusedVar","'gui' is assigned a value but never used.","'options' is assigned a value but never used.","'_mergeMeshes' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'cylinders' is assigned a value but never used."]