[{"/home/xkruzel/Desktop/todo/reactapp/src/index.js":"1","/home/xkruzel/Desktop/todo/reactapp/src/App.js":"2","/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js":"3","/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts":"4","/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx":"5","/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx":"6","/home/xkruzel/Desktop/todo/reactapp/src/Create.jsx":"7","/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx":"8","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js":"9","/home/xkruzel/Desktop/todo/reactapp/src/Point.js":"10"},{"size":535,"mtime":1662399185904,"results":"11","hashOfConfig":"12"},{"size":1907,"mtime":1664612970253,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1662399185904,"results":"14","hashOfConfig":"12"},{"size":127,"mtime":1662402289635,"results":"15","hashOfConfig":"12"},{"size":2220,"mtime":1664623874816,"results":"16","hashOfConfig":"12"},{"size":5396,"mtime":1665369026273,"results":"17","hashOfConfig":"12"},{"size":2471,"mtime":1664741301681,"results":"18","hashOfConfig":"12"},{"size":14471,"mtime":1664743115345,"results":"19","hashOfConfig":"12"},{"size":14606,"mtime":1665369342049,"results":"20","hashOfConfig":"12"},{"size":111,"mtime":1661080761641,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13dspl9",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/xkruzel/Desktop/todo/reactapp/src/index.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/App.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/reportWebVitals.js",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/StateApp.ts",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadJson.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/Visualise.jsx",["54","55","56","57","58","59","60"],[],"import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { init3Dgraphics } from './rendering.js';\nimport { StateApp } from './StateApp.ts'\n\nfunction getWindowSize() {\n    const main_div = document.getElementById('root');\n    const innerWidth = main_div.clientWidth;\n    const innerHeight = Math.max(main_div.clientHeight, 900);\n\n    return {innerWidth, innerHeight};\n}\n\n\nexport default class Visualise extends React.Component {\n    state = {\n        value : this.props.value || StateApp.Visualise,\n        number_of_nodes : 10,\n    };\n\n    handleBackButton = event => {\n        window.location.reload(false);\n    };\n\n\n    render() {\n        const fileData = this.props.fileData;\n\n        if (fileData === undefined || fileData.length === 0) {\n            return (\n                <div>\n                    <h3>There are no data available</h3>\n                    <p>Please got back to menu and try again</p>\n                    <input type=\"submit\" value=\"Back\" onClick={this.handleBackButton} />\n                </div>\n            );\n        }\n\n        if (!this.state.canvases_rendered) {\n\n            const window_sizes = getWindowSize();\n\n            var canvas_number = Object.keys(fileData).length;\n\n            var canvases = [];\n\n            var index = 0;\n\n            var both_semantics = false;\n            if (fileData[0]['sync'] !== undefined && fileData[0]['async'] !== undefined) {\n                both_semantics = true;\n                canvas_number = canvas_number * 2;\n            }\n\n            if (both_semantics) {\n                for (var key in fileData) {\n\n                    for (var sem in fileData[key]) {\n                        if (sem === 'Lines' || sem === 'Nodes') {\n                            if (sem === 'NumberOfNodes') {\n                                this.setState({ number_of_nodes : fileData[key][sem] });\n                            }\n                            continue\n                        }\n\n                        var width = window_sizes.innerWidth;\n                        var height =  window_sizes.innerHeight;\n\n                        const division = Math.floor(canvas_number/2);\n                        if (division <= 1) {\n                            height = window_sizes.innerHeight;\n                        } else {\n                            height = Math.floor(window_sizes.innerHeight/2);\n                        }\n                        width = Math.floor(window_sizes.innerWidth / (division + 1));\n                        \n\n                        canvases.push(React.createElement('canvas', { id : \"canvas\" + index, width: width, height: height, class: \"col\" }));\n\n                        index += 1;\n                    }\n                };\n\n            } else {\n                for (var key in fileData) {\n\n                    for (var sem in fileData[key]) {\n                        if (sem === 'Lines' || sem === 'Nodes') {\n                            if (sem === 'NumberOfNodes') {\n                                this.setState({ number_of_nodes : fileData[key][sem] });\n                            }\n                            continue\n                        }\n\n                        var width = window_sizes.innerWidth;\n                        var height =  window_sizes.innerHeight;\n                        if (canvas_number > 1) {\n\n                            const division = Math.floor(canvas_number/2);\n                            if (division <= 1) {\n                                height = window_sizes.innerHeight;\n                            } else {\n                                height =  Math.floor(window_sizes.innerHeight/2);\n                            }\n                            width = Math.floor(window_sizes.innerWidth / (division + 1));\n                        }\n\n                        canvases.push(React.createElement('canvas', { id : \"canvas\" + index, width: width, height: height, class: \"col\" }));\n                        index += 1;\n                    }\n                };\n            }\n\n            const div = React.createElement('div', { id : \"canvases_react\", class: \"row\" }, canvases);\n            ReactDOM.render(\n                div,\n                document.getElementById('canvases')\n            );\n            this.setState({ canvases_rendered : true });\n\n\n            return (<div>DDD</div>);\n        }\n\n        try {\n            var index = 0;\n            for (var key in fileData) {\n                for (var sem in fileData[key]) {\n                    if (sem === 'Lines' || sem === 'Nodes') {\n                        continue\n                    }\n                    const data = fileData[key][sem];\n                    const canvas = document.getElementById(\"canvas\" + index);\n\n                    console.log(data);\n                    init3Dgraphics(canvas, data, fileData[key]['Nodes']);\n\n                    index += 1;\n                }\n            };\n            \n        } catch (error) {\n            console.log(error)\n            return (\n                <div>\n                    <h3>Cannot visualize</h3>\n                    <input type=\"submit\" value=\"Back\" onClick={this.handleBackButton} />\n                </div>\n            );\n        }\n          \n\n        return (\n            <div>\n                <input type=\"submit\" value=\"Back\" onClick={this.handleBackButton} />\n            </div>\n        );\n    }\n}\n \n//export default Visualise;","/home/xkruzel/Desktop/todo/reactapp/src/Create.jsx",[],[],"/home/xkruzel/Desktop/todo/reactapp/src/LoadAeon.jsx",["61","62"],[],"import React from 'react';\nimport App from './App';\nimport { StateApp } from './StateApp.ts';\nimport Visualise from './Visualise';\nimport axios from \"axios\";\n\nlet param_arguments = {};\nlet param_lines = {};\n\nfunction get_select_fun(fun, name) {\n  return (\n    <select name={name} id={name} onClick={fun}>\n      <option value=\"&\"> & </option>\n      <option value=\"|\"> | </option>\n      <option value=\"->\"> -&gt; </option>\n      <option value=\"<=>\"> &lt;=&gt; </option>\n    </select>\n  );\n}\n\nfunction choose_parametrization(fun, args, regulations, nodes, name) {\n  var result = [];\n  args.forEach(function (arg, index) {\n    if (result.length > 0) {\n      result.push(get_select_fun(fun, name + \"_\" + index))\n    }\n\n    if (regulations[nodes[name]][nodes[arg]] === '-') {\n      result.push('!')\n    }\n\n    result.push(arg)\n  });\n\n  return result.map(arg => { return arg; });\n}\n\nexport default class LoadAeon extends React.Component {\n    state = {\n        value : this.props.value || StateApp.LoadAeon,\n        selectedFile: null,\n\n        option: 1,\n\n        json_data:null,\n        checked_nodes : [],\n\n        parsed_nodes_keys: null,\n        nodes: null,\n\n        compute: false,\n        clusters: null,\n        asked : false,\n\n        param_arguments: {},\n\n        param_count : 1,\n    };\n  //  const [param_arguments, set_param_arguments] = useState();\n\n    onFileChange = event => {\n      // Update the state\n      this.setState({ selectedFile: event.target.files[0] });\n    };\n\n    handleParams = (event) => {\n      const id_arr = event.currentTarget.id.split('_');\n      const name = id_arr[0];\n      const index = id_arr[1];\n\n      const element = event.target;\n      const parent_id = element.closest(\"ul\").getAttribute(\"id\").split('_');\n      console.log(event.target.value);\n\n      param_arguments[parent_id[1]][name][index - 1] = event.target.value; // TODO spravny operator\n    };\n\n    // On file upload (click the upload button)\n    onFileUpload = () => {\n\n      if (!this.state.sync && !this.state.async) {\n        // TODO chyba aspon jedno musi byt\n        return;\n      }\n      this.setState({ option : this.state.node ? 1 : 2 });\n\n      const file = this.state.selectedFile;\n\n      var reader = new FileReader();\n      reader.readAsText(file,'UTF-8');\n    \n      reader.addEventListener(\"load\", () => {\n          var r = reader.result;\n\n          var r_lines = r.split(\"\\n\");\n          const regex_comment = /^\\s*#/;\n          var result_data = [];\n          for (let i = 0; i < r_lines.length; i++) {\n            if (r_lines[i].match(regex_comment)) {\n              continue;\n            }\n            result_data.push(r_lines[i]);\n          }\n\n          this.setState({ file_read : result_data });\n          const result_data_joined = result_data.join(\" %% \");\n          document.cookie=\"resultData=\" + result_data_joined + \"; SameSite=None; Secure\";\n      });\n\n      this.setState({ value : StateApp.Config });\n    };\n  \n\n    fileData = () => {    \n        if (this.state.selectedFile) {\n           \n          return (\n            <div>\n              <h2>File Details:</h2>\n               \n                <p>File Name: {this.state.selectedFile.name}</p>\n                <p>File Type: {this.state.selectedFile.type}</p>\n   \n            </div>\n          );\n        } else {\n          return (\n            <div>\n              <br />\n              <h4>Choose before Pressing the Upload button</h4>\n            </div>\n          );\n        }\n    };\n\n    handleBackButton = event => {\n      this.setState({ value : StateApp.MainApp });\n    };\n\n    handleSemanticsButton = event => {\n      event.preventDefault();\n      if (!this.state.sync && !this.state.async) {\n        // TODO chyba aspon jedno musi byt\n        return;\n      }\n      this.setState({ option : this.state.node ? 1 : 2 });\n    };\n\n    handleNodesButton = event => {\n      event.preventDefault();\n      this.render();\n\n      this.setState({ compute : true });\n\n      if (this.state.params !== undefined) {\n        for (var c = 0; c < this.state.param_count; ++c) {\n          this.state.params.forEach((value, key) => {\n            \n            var args_concat = '';\n            var args = value[\"args\"].split(',');\n            for (var i = 0; i < args.length; ++i) {\n              if (args_concat.length > 0) {\n                args_concat += \" \" + param_arguments[c][key][ i - 1 ] + \" \";\n              }\n              args_concat += args[i];\n            }\n\n            const expresion_arr = value[\"expr\"].split(\"___parametrization___\");\n            var expr_snd = '';\n            if (expresion_arr.length > 1) {\n              expr_snd = expresion_arr[1];\n            }\n\n            if (param_lines[c] === undefined) {\n              param_lines[c] = []\n            }\n\n            param_lines[c].push( \"$\" + key + \" : \" + expresion_arr[0] + \" \" + args_concat + \" \" + expr_snd);\n          });\n\n        }\n      }\n    };\n\n    handleOnChange = (event, name) => {\n      var checked = this.state.checked_nodes;\n\n      if (event.target.checked) {\n        checked.push(name);\n      } else {\n        checked = checked.filter(function(value) {\n          return value === name;\n        });\n      }\n      this.setState({ checked_nodes: checked });\n    };\n\n    handleNoSave = () => {\n      this.setState({ asked : true });\n    }\n\n    handleSave = () => {\n      const element = document.createElement(\"a\");\n\n      const file = new Blob([this.state.clusters],\n        {\n          type:\"text/plain;charset=utf-8\"\n        });\n\n      element.href = URL.createObjectURL(file);\n      element.download = \"data.json\";\n      document.body.appendChild(element);\n      element.click();\n\n      this.setState({ asked : true });\n    }\n\n    addParam = (event) => {\n      event.preventDefault();\n      this.setState({ param_count : this.state.param_count + 1 });\n    }\n\n\n    render() {\n        if (this.state.value === StateApp.MainApp) {\n          return <App />;\n        }\n\n        console.log(this.state.value);\n\n        if (this.state.value === StateApp.Visualise) {\n\n          // Ask to save data\n          const clusters_parsed = JSON.parse(this.state.clusters);\n\n          if (this.state.asked === true) {\n            console.log(\"to visualise \", clusters_parsed);\n            return <Visualise fileData={clusters_parsed} />;\n          }\n          return (\n            <div>\n              <h3>Do you want to save json file before visualisation?</h3>\n              <br/>\n              <button onClick={this.handleSave}>Yes</button>\n              <button onClick={this.handleNoSave}>No, only visualise</button>\n\n            </div>\n          );\n        }  \n        \n        if (this.state.value === StateApp.Config) {\n\n          if (!this.state.nodes) {\n            axios\n              .get(\"http://127.0.0.1:8000/get_nodes\")\n              .then(response => {\n                const result = JSON.parse(response.data);\n                this.setState({ nodes : result[\"nodes\"] });\n\n                if (result[\"parametrization\"] !== undefined) {\n                  this.setState({ params : new Map(Object.entries(result[\"parametrization\"])), reguls : result[\"regulations\"] });\n                }\n\n              });\n            return (\n                <h3>Getting nodes</h3>\n            );\n          }\n\n          if (this.state.nodes && this.state.compute === false) {\n\n            var parametrization_selection;\n            const counts = Array.from(Array(this.state.param_count).keys());\n\n            if (this.state.params !== undefined) {\n  \n              var lis = [];\n              this.state.params.forEach((value, name) => {\n                const args = value[\"args\"].split(',');\n                const choose_param = choose_parametrization(this.handleParams, args, this.state.reguls, this.state.nodes, name);\n  \n                const expresion_arr = value[\"expr\"].split(\"___parametrization___\");\n                var expr_snd = '';\n                if (expresion_arr.length > 1) {\n                  expr_snd = expresion_arr[1];\n                }\n\n                for (var c = 0; c < this.state.param_count; ++c) {\n                  if (param_arguments[c] === undefined) {\n                    param_arguments[c] = {}\n                  }\n                  if (param_arguments[c][name] === undefined) {\n                    param_arguments[c][name] = args.map( arg => \"&\" );\n                    param_arguments[c][name].pop();\n                  }\n                }\n  \n                lis.push(<li key={name}> {name}: {expresion_arr[0]}&nbsp;{choose_param}&nbsp;{expr_snd}</li>);\n              });\n\n              parametrization_selection = <div className=\"App\">\n                                            <h3>Select parametrizations</h3>\n                                            <div class=\"row\">\n                                            {\n                                              counts.map(c => {\n                                                return (\n                                                <div class=\"col\">\n                                                  <ul id={'param_' + c}>\n                                                    {\n                                                      lis.map(li => {\n                                                        return li;\n                                                      }, this)\n                                                    }\n                                                  </ul>\n                                                </div>);\n                                              }, this)\n                                            }\n                                            \n                                            <button class=\"col\" onClick={this.addParam}> + </button>\n                                            </div>\n                                          </div>\n            }\n\n            if (!this.state.parsed_nodes_keys) {\n              const nodes_keys = Object.keys(this.state.nodes);\n              this.setState({parsed_nodes_keys : nodes_keys});\n            }\n\n            const nodes_selection = <div className=\"App\">\n                                      <h3>Select nodes</h3>\n                                        {this.state.parsed_nodes_keys.map(name => {\n                                          return (\n                                            <div>\n                                              <input\n                                                type=\"checkbox\"\n                                                id={`custom-checkbox-${name}`}\n                                                name={name}\n                                                value={name}\n                                                onChange={ (event) => { this.handleOnChange(event, name) }}\n                                              />\n                                              <label htmlFor={`custom-checkbox-${name}`}>{name}</label>\n                                            </div>\n                                          );\n                                        })}\n                                    </div>;\n\n            return (\n              <div>\n                <form>\n                  {nodes_selection}\n                  {parametrization_selection}\n                  <input type=\"submit\" value=\"Send\" onClick={this.handleNodesButton} />\n                </form>\n              </div>\n            );\n          }\n\n          if (this.state.compute) {\n            const result_data_joined = this.state.file_read.join(\" %% \");\n\n            document.cookie = \"resultData=\" + result_data_joined + \"; SameSite=None; Secure\";\n\n\n            const nodes = this.state.checked_nodes.join(',');\n            const params = \"semantics=\" \n                          + \"&option=\" + this.state.option\n                          + (nodes !== \"\" ? \"&nodes=\" + nodes : \"\")\n\n            var data_params = {\n              semantics: (this.state.async ? (this.state.sync ? \"async,sync\" : \"async\") : \"sync\"),\n              options: this.state.option,\n              nodes: nodes\n            }\n            \n            if (param_lines !== {}) {\n              const param_lines_json = JSON.stringify(param_lines);\n              data_params['params'] = param_lines_json;              \n            }\n\n            axios\n              .get(\"http://127.0.0.1:8000/get_data/\", { params: data_params })\n              .then(response => {\n                this.setState({ clusters : response.data });\n                this.setState({ value : StateApp.Visualise });\n                });\n            \n            return (\n            <div>\n              <h3>Sending request</h3>\n            </div>\n            );\n          }        \n          \n          return (\n            <div>\n              <h3>Waiting for computation</h3>\n            </div>\n          );\n          \n        }\n\n        return (\n          <div>\n            <div class=\"row\">\n              <div class=\"col\">\n                <h3>\n                  File Upload\n                </h3>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} accept=\".aeon\"/>\n                    <button onClick={this.onFileUpload}>\n                      Process\n                    </button>\n                </div>\n              {this.fileData()}\n              </div>\n              <div class=\"col\">\n                <h3>\n                Semantics\n                </h3>\n                <form>\n                  <input type=\"checkbox\" id=\"async\" name=\"semantics\" value=\"1\" onChange={event => this.setState({async : true})}/>\n                  <label for=\"async\">Async</label>\n                  <input type=\"checkbox\" id=\"sync\" name=\"semantics\" value=\"2\" onChange={event => this.setState({sync : true})}/>\n                  <label for=\"sync\">Sync</label>\n                  <br/>\n                  <input type=\"radio\" id=\"node\" name=\"option\" value=\"1\"  checked onChange={event => this.setState({node : true, whole: false})}/>\n                  <label for=\"node\">from one node</label>\n                  <input type=\"radio\" id=\"whole\" name=\"option\" value=\"2\" disabled onChange={event => this.setState({whole : true, node: false})}/>\n                  <label for=\"whole\">whole state space</label>\n                </form>\n\n              </div>\n            </div>\n            <div class=\"row\">\n             <input type=\"submit\" value=\"Back\" class=\"col-sm-2\" onClick={this.handleBackButton} />\n            </div>\n          </div>\n          );\n    }\n}\n","/home/xkruzel/Desktop/todo/reactapp/src/rendering.js",["63","64","65","66","67","68","69","70"],[],"/home/xkruzel/Desktop/todo/reactapp/src/Point.js",[],[],{"ruleId":"71","severity":1,"message":"72","line":85,"column":26,"nodeType":"73","messageId":"74","endLine":85,"endColumn":29},{"ruleId":"71","severity":1,"message":"75","line":87,"column":30,"nodeType":"73","messageId":"74","endLine":87,"endColumn":33},{"ruleId":"71","severity":1,"message":"76","line":95,"column":29,"nodeType":"73","messageId":"74","endLine":95,"endColumn":34},{"ruleId":"71","severity":1,"message":"77","line":96,"column":29,"nodeType":"73","messageId":"74","endLine":96,"endColumn":35},{"ruleId":"71","severity":1,"message":"78","line":126,"column":17,"nodeType":"73","messageId":"74","endLine":126,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":127,"column":22,"nodeType":"73","messageId":"74","endLine":127,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":128,"column":26,"nodeType":"73","messageId":"74","endLine":128,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":157,"column":37,"nodeType":"81","messageId":"82","endLine":179,"endColumn":12},{"ruleId":"83","severity":1,"message":"84","line":365,"column":19,"nodeType":"73","messageId":"85","endLine":365,"endColumn":25},{"ruleId":"83","severity":1,"message":"86","line":58,"column":9,"nodeType":"73","messageId":"85","endLine":58,"endColumn":19},{"ruleId":"83","severity":1,"message":"87","line":61,"column":9,"nodeType":"73","messageId":"85","endLine":61,"endColumn":12},{"ruleId":"83","severity":1,"message":"88","line":62,"column":9,"nodeType":"73","messageId":"85","endLine":62,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":75,"column":9,"nodeType":"73","messageId":"85","endLine":75,"endColumn":20},{"ruleId":"83","severity":1,"message":"90","line":76,"column":9,"nodeType":"73","messageId":"85","endLine":76,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":201,"column":5,"nodeType":"93","messageId":"94","endLine":205,"endColumn":22},{"ruleId":"83","severity":1,"message":"95","line":266,"column":9,"nodeType":"73","messageId":"85","endLine":266,"endColumn":14},{"ruleId":"83","severity":1,"message":"96","line":291,"column":17,"nodeType":"73","messageId":"85","endLine":291,"endColumn":23},"no-redeclare","'key' is already defined.","Identifier","redeclared","'sem' is already defined.","'width' is already defined.","'height' is already defined.","'index' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'c', 'c', 'c', 'c'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'params' is assigned a value but never used.","unusedVar","'axesHelper' is assigned a value but never used.","'gui' is assigned a value but never used.","'options' is assigned a value but never used.","'lightHelper' is assigned a value but never used.","'gridHelper' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'count' is assigned a value but never used.","'offset' is assigned a value but never used."]